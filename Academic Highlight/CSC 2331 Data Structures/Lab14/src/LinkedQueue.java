/**   A class that implements the ADT queue by using a chain of nodes   that has both head and tail references.      @author Frank M. Carrano   @version 3.0*//** * Derrick Murphy * CSC 2331 * Dr.Dicheva */public class LinkedQueue<T> implements QueueInterface<T>{  private Node firstNode; // references node at front of queue  private Node lastNode;  // references node at back of queue  int count;  		public LinkedQueue()	{		firstNode = null;		lastNode = null;	} // end default constructor		public void enqueue(T newEntry)	{		Node newNode = new Node(newEntry, null);				if (isEmpty())			firstNode = newNode;		else			lastNode.setNextNode(newNode);		lastNode = newNode;		count++;	} // end enqueue	public T getFront()	{		T front = null;				if (!isEmpty())			front = firstNode.getData();				return front;	} // end getFront	public T dequeue()	{		T front = null;				if (!isEmpty())		{			front = firstNode.getData();			firstNode = firstNode.getNextNode();						if (firstNode == null)				lastNode = null;			count--;		} // end if				return front;	} // end dequeue		public int size()	{		return count;	}		public String toString()	   {	      String result = "";	      LinkedQueue<T>.Node current = firstNode;	      while (current != null)	      {	         result = result + (current.getData()).toString() + "\n";	         current = current.getNextNode();	      }	      return result;	   }				public boolean isEmpty()	{		return (firstNode == null) && (lastNode == null);	} // end isEmpty		public void clear()	{		firstNode = null;			lastNode = null;		count=0;	} // end clear	private class Node	{		private T    data; // entry in queue		private Node next; // link to next node		private Node(T dataPortion)		{			data = dataPortion;			next = null;			} // end constructor				private Node(T dataPortion, Node linkPortion)		{			data = dataPortion;			next = linkPortion;			} // end constructor		private T getData()		{			return data;		} // end getData		private void setData(T newData)		{			data = newData;		} // end setData		private Node getNextNode()		{			return next;		} // end getNextNode				private void setNextNode(Node nextNode)		{			next = nextNode;		} // end setNextNode	} // end Node	public static void main(String args[]){		int[] numbs = {10,20,30,40,50};		LinkedQueue<Integer> queue1 = new LinkedQueue<Integer>();				for(int x=0;x<numbs.length;x++){			queue1.enqueue(numbs[x]);		}				System.out.println("Size: " + queue1.size());		System.out.print(queue1.toString());	}} // end Linkedqueue